{
  "version": 3,
  "sources": ["../../@uploadcare/upload-client/dist/esm/index.browser.mjs"],
  "sourcesContent": ["function isObject(o) {\n    return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nconst SEPARATOR = /\\W|_/g;\nfunction camelizeString(text) {\n    return text\n        .split(SEPARATOR)\n        .map((word, index) => word.charAt(0)[index > 0 ? 'toUpperCase' : 'toLowerCase']() +\n        word.slice(1))\n        .join('');\n}\nfunction camelizeArrayItems(array, { ignoreKeys } = { ignoreKeys: [] }) {\n    if (!Array.isArray(array)) {\n        return array;\n    }\n    return array.map((item) => camelizeKeys(item, { ignoreKeys }));\n}\nfunction camelizeKeys(source, { ignoreKeys } = { ignoreKeys: [] }) {\n    if (Array.isArray(source)) {\n        return camelizeArrayItems(source, { ignoreKeys });\n    }\n    if (!isObject(source)) {\n        return source;\n    }\n    const result = {};\n    for (const key of Object.keys(source)) {\n        let value = source[key];\n        if (ignoreKeys.includes(key)) {\n            result[key] = value;\n            continue;\n        }\n        if (isObject(value)) {\n            value = camelizeKeys(value, { ignoreKeys });\n        }\n        else if (Array.isArray(value)) {\n            value = camelizeArrayItems(value, { ignoreKeys });\n        }\n        result[camelizeString(key)] = value;\n    }\n    return result;\n}\n\n/**\n * SetTimeout as Promise.\n *\n * @param {number} ms Timeout in milliseconds.\n */\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nfunction getUserAgent$1({ libraryName, libraryVersion, userAgent, publicKey = '', integration = '' }) {\n    const languageName = 'JavaScript';\n    if (typeof userAgent === 'string') {\n        return userAgent;\n    }\n    if (typeof userAgent === 'function') {\n        return userAgent({\n            publicKey,\n            libraryName,\n            libraryVersion,\n            languageName,\n            integration\n        });\n    }\n    const mainInfo = [libraryName, libraryVersion, publicKey]\n        .filter(Boolean)\n        .join('/');\n    const additionInfo = [languageName, integration].filter(Boolean).join('; ');\n    return `${mainInfo} (${additionInfo})`;\n}\n\nconst defaultOptions = {\n    factor: 2,\n    time: 100\n};\nfunction retrier(fn, options = defaultOptions) {\n    let attempts = 0;\n    function runAttempt(fn) {\n        const defaultDelayTime = Math.round(options.time * options.factor ** attempts);\n        const retry = (ms) => delay(ms ?? defaultDelayTime).then(() => {\n            attempts += 1;\n            return runAttempt(fn);\n        });\n        return fn({\n            attempt: attempts,\n            retry\n        });\n    }\n    return runAttempt(fn);\n}\n\nclass UploadcareError extends Error {\n}\n\nclass NetworkError extends UploadcareError {\n    originalProgressEvent;\n    constructor(progressEvent) {\n        super();\n        this.name = 'NetworkError';\n        this.message = 'Network error';\n        Object.setPrototypeOf(this, NetworkError.prototype);\n        this.originalProgressEvent = progressEvent;\n    }\n}\n\nconst onCancel = (signal, callback) => {\n    if (signal) {\n        if (signal.aborted) {\n            Promise.resolve().then(callback);\n        }\n        else {\n            signal.addEventListener('abort', () => callback(), { once: true });\n        }\n    }\n};\n\nclass CancelError extends UploadcareError {\n    isCancel = true;\n    constructor(message = 'Request canceled') {\n        super(message);\n        this.name = 'CancelError';\n        Object.setPrototypeOf(this, CancelError.prototype);\n    }\n}\n\nconst DEFAULT_INTERVAL = 500;\nconst poll = ({ check, interval = DEFAULT_INTERVAL, timeout, signal }) => new Promise((resolve, reject) => {\n    let tickTimeoutId;\n    let timeoutId;\n    onCancel(signal, () => {\n        tickTimeoutId && clearTimeout(tickTimeoutId);\n        reject(new CancelError('Poll cancelled'));\n    });\n    if (timeout) {\n        timeoutId = setTimeout(() => {\n            tickTimeoutId && clearTimeout(tickTimeoutId);\n            reject(new CancelError('Timed out'));\n        }, timeout);\n    }\n    const tick = () => {\n        try {\n            Promise.resolve(check(signal))\n                .then((result) => {\n                if (result) {\n                    timeoutId && clearTimeout(timeoutId);\n                    resolve(result);\n                }\n                else {\n                    tickTimeoutId = setTimeout(tick, interval);\n                }\n            })\n                .catch((error) => {\n                timeoutId && clearTimeout(timeoutId);\n                reject(error);\n            });\n        }\n        catch (error) {\n            timeoutId && clearTimeout(timeoutId);\n            reject(error);\n        }\n    };\n    tickTimeoutId = setTimeout(tick, 0);\n});\n\n/*\n  Settings for future support:\n  parallelDirectUploads: 10,\n */\nconst defaultSettings = {\n    baseCDN: 'https://ucarecdn.com',\n    baseURL: 'https://upload.uploadcare.com',\n    maxContentLength: 50 * 1024 * 1024, // 50 MB\n    retryThrottledRequestMaxTimes: 1,\n    retryNetworkErrorMaxTimes: 3,\n    multipartMinFileSize: 25 * 1024 * 1024, // 25 MB\n    multipartChunkSize: 5 * 1024 * 1024, // 5 MB\n    multipartMinLastPartSize: 1024 * 1024, // 1MB\n    maxConcurrentRequests: 4,\n    pollingTimeoutMilliseconds: 10000,\n    pusherKey: '79ae88bd931ea68464d9'\n};\nconst defaultContentType = 'application/octet-stream';\nconst defaultFilename = 'original';\n\nconst request = ({ method, url, data, headers = {}, signal, onProgress }) => new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    const requestMethod = method?.toUpperCase() || 'GET';\n    let aborted = false;\n    /**\n     * Force synchronous flag to be off Some chrome versions gets\n     * `InvalidAccessError` error when we set `responseType` See\n     * https://xhr.spec.whatwg.org/#synchronous-flag and\n     * https://bugs.chromium.org/p/chromium/issues/detail?id=1346628\n     */\n    xhr.open(requestMethod, url, true);\n    if (headers) {\n        Object.entries(headers).forEach((entry) => {\n            const [key, value] = entry;\n            typeof value !== 'undefined' &&\n                !Array.isArray(value) &&\n                xhr.setRequestHeader(key, value);\n        });\n    }\n    xhr.responseType = 'text';\n    onCancel(signal, () => {\n        aborted = true;\n        xhr.abort();\n        reject(new CancelError());\n    });\n    xhr.onload = () => {\n        if (xhr.status != 200) {\n            // analyze HTTP status of the response\n            reject(new Error(`Error ${xhr.status}: ${xhr.statusText}`)); // e.g. 404: Not Found\n        }\n        else {\n            const request = {\n                method: requestMethod,\n                url,\n                data,\n                headers: headers || undefined,\n                signal,\n                onProgress\n            };\n            // Convert the header string into an array\n            // of individual headers\n            const headersArray = xhr\n                .getAllResponseHeaders()\n                .trim()\n                .split(/[\\r\\n]+/);\n            // Create a map of header names to values\n            const responseHeaders = {};\n            headersArray.forEach(function (line) {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n                if (header && typeof header !== 'undefined') {\n                    responseHeaders[header] = value;\n                }\n            });\n            const responseData = xhr.response;\n            const responseStatus = xhr.status;\n            resolve({\n                request,\n                data: responseData,\n                headers: responseHeaders,\n                status: responseStatus\n            });\n        }\n    };\n    xhr.onerror = (progressEvent) => {\n        if (aborted)\n            return;\n        // only triggers if the request couldn't be made at all\n        reject(new NetworkError(progressEvent));\n    };\n    if (onProgress && typeof onProgress === 'function') {\n        xhr.upload.onprogress = (event) => {\n            if (event.lengthComputable) {\n                onProgress({\n                    isComputable: true,\n                    value: event.loaded / event.total\n                });\n            }\n            else {\n                onProgress({ isComputable: false });\n            }\n        };\n    }\n    if (data) {\n        xhr.send(data);\n    }\n    else {\n        xhr.send();\n    }\n});\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction identity(obj, ..._args) {\n    return obj;\n}\n\nconst getFileOptions = ({ name }) => name ? [name] : [];\nconst transformFile = identity;\nvar getFormData = () => new FormData();\n\nconst isBuffer = (data) => false;\n\nconst isBlob = (data) => {\n    return typeof Blob !== 'undefined' && data instanceof Blob;\n};\nconst isFile = (data) => {\n    return typeof File !== 'undefined' && data instanceof File;\n};\nconst isReactNativeAsset = (data) => {\n    return (!!data &&\n        typeof data === 'object' &&\n        !Array.isArray(data) &&\n        'uri' in data &&\n        typeof data.uri === 'string');\n};\nconst isFileData = (data) => {\n    return (isBlob(data) || isFile(data) || isBuffer() || isReactNativeAsset(data));\n};\n\nconst isSimpleValue = (value) => {\n    return (typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'undefined');\n};\nconst isObjectValue = (value) => {\n    return !!value && typeof value === 'object' && !Array.isArray(value);\n};\nconst isFileValue = (value) => !!value &&\n    typeof value === 'object' &&\n    'data' in value &&\n    isFileData(value.data);\nfunction collectParams(params, inputKey, inputValue) {\n    if (Array.isArray(inputValue)) {\n        for (const value of inputValue) {\n            collectParams(params, `${inputKey}[]`, value);\n        }\n    }\n    else if (isFileValue(inputValue)) {\n        const { name, contentType } = inputValue;\n        const file = transformFile(inputValue.data, name, contentType ?? defaultContentType);\n        const options = getFileOptions({ name, contentType });\n        params.push([inputKey, file, ...options]);\n    }\n    else if (isObjectValue(inputValue)) {\n        for (const [key, value] of Object.entries(inputValue)) {\n            if (typeof value !== 'undefined') {\n                params.push([`${inputKey}[${key}]`, String(value)]);\n            }\n        }\n    }\n    else if (isSimpleValue(inputValue) && inputValue) {\n        params.push([inputKey, inputValue.toString()]);\n    }\n}\nfunction getFormDataParams(options) {\n    const params = [];\n    for (const [key, value] of Object.entries(options)) {\n        collectParams(params, key, value);\n    }\n    return params;\n}\nfunction buildFormData(options) {\n    const formData = getFormData();\n    const paramsList = getFormDataParams(options);\n    for (const params of paramsList) {\n        const [key, value, ...rest] = params;\n        // node form-data has another signature for append\n        formData.append(key, value, ...rest);\n    }\n    return formData;\n}\n\nclass UploadError extends UploadcareError {\n    code;\n    request;\n    response;\n    headers;\n    constructor(message, code, request, response, headers) {\n        super();\n        this.name = 'UploadError';\n        this.message = message;\n        this.code = code;\n        this.request = request;\n        this.response = response;\n        this.headers = headers;\n        Object.setPrototypeOf(this, UploadError.prototype);\n    }\n}\n\nconst buildSearchParams = (query) => {\n    const searchParams = new URLSearchParams();\n    for (const [key, value] of Object.entries(query)) {\n        if (value && typeof value === 'object' && !Array.isArray(value)) {\n            Object.entries(value)\n                .filter((entry) => entry[1] ?? false)\n                .forEach((entry) => searchParams.set(`${key}[${entry[0]}]`, String(entry[1])));\n        }\n        else if (Array.isArray(value)) {\n            value.forEach((val) => {\n                searchParams.append(`${key}[]`, val);\n            });\n        }\n        else if (typeof value === 'string' && value) {\n            searchParams.set(key, value);\n        }\n        else if (typeof value === 'number') {\n            searchParams.set(key, value.toString());\n        }\n    }\n    return searchParams.toString();\n};\nconst getUrl = (base, path, query) => {\n    const url = new URL(base);\n    url.pathname = (url.pathname + path).replace('//', '/');\n    if (query) {\n        url.search = buildSearchParams(query);\n    }\n    return url.toString();\n};\n\nvar version = '6.14.3';\n\nconst LIBRARY_NAME = 'UploadcareUploadClient';\nconst LIBRARY_VERSION = version;\nfunction getUserAgent(options) {\n    return getUserAgent$1({\n        libraryName: LIBRARY_NAME,\n        libraryVersion: LIBRARY_VERSION,\n        ...options\n    });\n}\n\nconst REQUEST_WAS_THROTTLED_CODE = 'RequestThrottledError';\nconst DEFAULT_RETRY_AFTER_TIMEOUT = 15000;\nconst DEFAULT_NETWORK_ERROR_TIMEOUT = 1000;\nfunction getTimeoutFromThrottledRequest(error) {\n    const { headers } = error || {};\n    if (!headers || typeof headers['retry-after'] !== 'string') {\n        return DEFAULT_RETRY_AFTER_TIMEOUT;\n    }\n    const seconds = parseInt(headers['retry-after'], 10);\n    if (!Number.isFinite(seconds)) {\n        return DEFAULT_RETRY_AFTER_TIMEOUT;\n    }\n    return seconds * 1000;\n}\nfunction retryIfFailed(fn, options) {\n    const { retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes } = options;\n    return retrier(({ attempt, retry }) => fn().catch((error) => {\n        if ('response' in error &&\n            error?.code === REQUEST_WAS_THROTTLED_CODE &&\n            attempt < retryThrottledRequestMaxTimes) {\n            return retry(getTimeoutFromThrottledRequest(error));\n        }\n        if (error instanceof NetworkError &&\n            attempt < retryNetworkErrorMaxTimes) {\n            return retry((attempt + 1) * DEFAULT_NETWORK_ERROR_TIMEOUT);\n        }\n        throw error;\n    }));\n}\n\nconst getContentType = (file) => {\n    let contentType = '';\n    if (isBlob(file) || isFile(file) || isReactNativeAsset(file)) {\n        contentType = file.type;\n    }\n    return contentType || defaultContentType;\n};\n\nconst getFileName = (file) => {\n    let filename = '';\n    if (isFile(file) && file.name) {\n        filename = file.name;\n    }\n    else if (isBlob(file) || isBuffer()) {\n        filename = '';\n    }\n    else if (isReactNativeAsset(file) && file.name) {\n        filename = file.name;\n    }\n    return filename || defaultFilename;\n};\n\nfunction getStoreValue(store) {\n    if (typeof store === 'undefined' || store === 'auto') {\n        return 'auto';\n    }\n    return store ? '1' : '0';\n}\n\n/**\n * Performs file uploading request to Uploadcare Upload API. Can be canceled and\n * has progress.\n */\nfunction base(file, { publicKey, fileName, contentType, baseURL = defaultSettings.baseURL, secureSignature, secureExpire, store, signal, onProgress, source = 'local', integration, userAgent, retryThrottledRequestMaxTimes = defaultSettings.retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes = defaultSettings.retryNetworkErrorMaxTimes, metadata }) {\n    return retryIfFailed(() => request({\n        method: 'POST',\n        url: getUrl(baseURL, '/base/', {\n            jsonerrors: 1\n        }),\n        headers: {\n            'X-UC-User-Agent': getUserAgent({ publicKey, integration, userAgent })\n        },\n        data: buildFormData({\n            file: {\n                data: file,\n                name: fileName || getFileName(file),\n                contentType: contentType || getContentType(file)\n            },\n            UPLOADCARE_PUB_KEY: publicKey,\n            UPLOADCARE_STORE: getStoreValue(store),\n            signature: secureSignature,\n            expire: secureExpire,\n            source: source,\n            metadata\n        }),\n        signal,\n        onProgress\n    }).then(({ data, headers, request }) => {\n        const response = camelizeKeys(JSON.parse(data));\n        if ('error' in response) {\n            throw new UploadError(response.error.content, response.error.errorCode, request, response, headers);\n        }\n        else {\n            return response;\n        }\n    }), { retryNetworkErrorMaxTimes, retryThrottledRequestMaxTimes });\n}\n\nvar TypeEnum;\n(function (TypeEnum) {\n    TypeEnum[\"Token\"] = \"token\";\n    TypeEnum[\"FileInfo\"] = \"file_info\";\n})(TypeEnum || (TypeEnum = {}));\n/** Uploading files from URL. */\nfunction fromUrl(sourceUrl, { publicKey, baseURL = defaultSettings.baseURL, store, fileName, checkForUrlDuplicates, saveUrlForRecurrentUploads, secureSignature, secureExpire, source = 'url', signal, integration, userAgent, retryThrottledRequestMaxTimes = defaultSettings.retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes = defaultSettings.retryNetworkErrorMaxTimes, metadata }) {\n    return retryIfFailed(() => request({\n        method: 'POST',\n        headers: {\n            'X-UC-User-Agent': getUserAgent({ publicKey, integration, userAgent })\n        },\n        url: getUrl(baseURL, '/from_url/', {\n            jsonerrors: 1,\n            pub_key: publicKey,\n            source_url: sourceUrl,\n            store: getStoreValue(store),\n            filename: fileName,\n            check_URL_duplicates: checkForUrlDuplicates ? 1 : undefined,\n            save_URL_duplicates: saveUrlForRecurrentUploads ? 1 : undefined,\n            signature: secureSignature,\n            expire: secureExpire,\n            source: source,\n            metadata\n        }),\n        signal\n    }).then(({ data, headers, request }) => {\n        const response = camelizeKeys(JSON.parse(data));\n        if ('error' in response) {\n            throw new UploadError(response.error.content, response.error.errorCode, request, response, headers);\n        }\n        else {\n            return response;\n        }\n    }), { retryNetworkErrorMaxTimes, retryThrottledRequestMaxTimes });\n}\n\nvar Status;\n(function (Status) {\n    Status[\"Unknown\"] = \"unknown\";\n    Status[\"Waiting\"] = \"waiting\";\n    Status[\"Progress\"] = \"progress\";\n    Status[\"Error\"] = \"error\";\n    Status[\"Success\"] = \"success\";\n})(Status || (Status = {}));\nconst isErrorResponse = (response) => {\n    return 'status' in response && response.status === Status.Error;\n};\n/** Checking upload status and working with file tokens. */\nfunction fromUrlStatus(token, { publicKey, baseURL = defaultSettings.baseURL, signal, integration, userAgent, retryThrottledRequestMaxTimes = defaultSettings.retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes = defaultSettings.retryNetworkErrorMaxTimes } = {}) {\n    return retryIfFailed(() => request({\n        method: 'GET',\n        headers: publicKey\n            ? {\n                'X-UC-User-Agent': getUserAgent({\n                    publicKey,\n                    integration,\n                    userAgent\n                })\n            }\n            : undefined,\n        url: getUrl(baseURL, '/from_url/status/', {\n            jsonerrors: 1,\n            token\n        }),\n        signal\n    }).then(({ data, headers, request }) => {\n        const response = camelizeKeys(JSON.parse(data));\n        if ('error' in response && !isErrorResponse(response)) {\n            throw new UploadError(response.error.content, response.error.errorCode, request, response, headers);\n        }\n        else {\n            return response;\n        }\n    }), { retryNetworkErrorMaxTimes, retryThrottledRequestMaxTimes });\n}\n\n/** Create files group. */\nfunction group(uuids, { publicKey, baseURL = defaultSettings.baseURL, jsonpCallback, secureSignature, secureExpire, signal, source, integration, userAgent, retryThrottledRequestMaxTimes = defaultSettings.retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes = defaultSettings.retryNetworkErrorMaxTimes }) {\n    return retryIfFailed(() => request({\n        method: 'POST',\n        headers: {\n            'X-UC-User-Agent': getUserAgent({ publicKey, integration, userAgent })\n        },\n        url: getUrl(baseURL, '/group/', {\n            jsonerrors: 1\n        }),\n        data: buildFormData({\n            files: uuids,\n            callback: jsonpCallback,\n            pub_key: publicKey,\n            signature: secureSignature,\n            expire: secureExpire,\n            source\n        }),\n        signal\n    }).then(({ data, headers, request }) => {\n        const response = camelizeKeys(JSON.parse(data));\n        if ('error' in response) {\n            throw new UploadError(response.error.content, response.error.errorCode, request, response, headers);\n        }\n        else {\n            return response;\n        }\n    }), { retryNetworkErrorMaxTimes, retryThrottledRequestMaxTimes });\n}\n\n/** Get info about group. */\nfunction groupInfo(id, { publicKey, baseURL = defaultSettings.baseURL, signal, source, integration, userAgent, retryThrottledRequestMaxTimes = defaultSettings.retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes = defaultSettings.retryNetworkErrorMaxTimes }) {\n    return retryIfFailed(() => request({\n        method: 'GET',\n        headers: {\n            'X-UC-User-Agent': getUserAgent({ publicKey, integration, userAgent })\n        },\n        url: getUrl(baseURL, '/group/info/', {\n            jsonerrors: 1,\n            pub_key: publicKey,\n            group_id: id,\n            source\n        }),\n        signal\n    }).then(({ data, headers, request }) => {\n        const response = camelizeKeys(JSON.parse(data));\n        if ('error' in response) {\n            throw new UploadError(response.error.content, response.error.errorCode, request, response, headers);\n        }\n        else {\n            return response;\n        }\n    }), { retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes });\n}\n\n/** Returns a JSON dictionary holding file info. */\nfunction info(uuid, { publicKey, baseURL = defaultSettings.baseURL, signal, source, integration, userAgent, retryThrottledRequestMaxTimes = defaultSettings.retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes = defaultSettings.retryNetworkErrorMaxTimes }) {\n    return retryIfFailed(() => request({\n        method: 'GET',\n        headers: {\n            'X-UC-User-Agent': getUserAgent({ publicKey, integration, userAgent })\n        },\n        url: getUrl(baseURL, '/info/', {\n            jsonerrors: 1,\n            pub_key: publicKey,\n            file_id: uuid,\n            source\n        }),\n        signal\n    }).then(({ data, headers, request }) => {\n        const response = camelizeKeys(JSON.parse(data));\n        if ('error' in response) {\n            throw new UploadError(response.error.content, response.error.errorCode, request, response, headers);\n        }\n        else {\n            return response;\n        }\n    }), { retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes });\n}\n\n/** Start multipart uploading. */\nfunction multipartStart(size, { publicKey, contentType, fileName, multipartChunkSize = defaultSettings.multipartChunkSize, baseURL = '', secureSignature, secureExpire, store, signal, source = 'local', integration, userAgent, retryThrottledRequestMaxTimes = defaultSettings.retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes = defaultSettings.retryNetworkErrorMaxTimes, metadata }) {\n    return retryIfFailed(() => request({\n        method: 'POST',\n        url: getUrl(baseURL, '/multipart/start/', { jsonerrors: 1 }),\n        headers: {\n            'X-UC-User-Agent': getUserAgent({ publicKey, integration, userAgent })\n        },\n        data: buildFormData({\n            filename: fileName || defaultFilename,\n            size: size,\n            content_type: contentType || defaultContentType,\n            part_size: multipartChunkSize,\n            UPLOADCARE_STORE: getStoreValue(store),\n            UPLOADCARE_PUB_KEY: publicKey,\n            signature: secureSignature,\n            expire: secureExpire,\n            source: source,\n            metadata\n        }),\n        signal\n    }).then(({ data, headers, request }) => {\n        const response = camelizeKeys(JSON.parse(data));\n        if ('error' in response) {\n            throw new UploadError(response.error.content, response.error.errorCode, request, response, headers);\n        }\n        else {\n            // convert to array\n            response.parts = Object.keys(response.parts).map((key) => response.parts[Number(key)]);\n            return response;\n        }\n    }), { retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes });\n}\n\n/** Complete multipart uploading. */\nfunction multipartUpload(part, url, { contentType, signal, onProgress, retryThrottledRequestMaxTimes = defaultSettings.retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes = defaultSettings.retryNetworkErrorMaxTimes }) {\n    return retryIfFailed(() => request({\n        method: 'PUT',\n        url,\n        data: part,\n        // Upload request can't be non-computable because we always know exact size\n        onProgress: onProgress,\n        signal,\n        headers: {\n            'Content-Type': contentType || defaultContentType\n        }\n    })\n        .then((result) => {\n        // hack for node ¯\\_(ツ)_/¯\n        if (onProgress)\n            onProgress({\n                isComputable: true,\n                value: 1\n            });\n        return result;\n    })\n        .then(({ status }) => ({ code: status })), {\n        retryThrottledRequestMaxTimes,\n        retryNetworkErrorMaxTimes\n    });\n}\n\n/** Complete multipart uploading. */\nfunction multipartComplete(uuid, { publicKey, baseURL = defaultSettings.baseURL, source = 'local', signal, integration, userAgent, retryThrottledRequestMaxTimes = defaultSettings.retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes = defaultSettings.retryNetworkErrorMaxTimes }) {\n    return retryIfFailed(() => request({\n        method: 'POST',\n        url: getUrl(baseURL, '/multipart/complete/', { jsonerrors: 1 }),\n        headers: {\n            'X-UC-User-Agent': getUserAgent({ publicKey, integration, userAgent })\n        },\n        data: buildFormData({\n            uuid: uuid,\n            UPLOADCARE_PUB_KEY: publicKey,\n            source: source\n        }),\n        signal\n    }).then(({ data, headers, request }) => {\n        const response = camelizeKeys(JSON.parse(data));\n        if ('error' in response) {\n            throw new UploadError(response.error.content, response.error.errorCode, request, response, headers);\n        }\n        else {\n            return response;\n        }\n    }), { retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes });\n}\n\nfunction isReadyPoll(uuid, { publicKey, baseURL, source, integration, userAgent, retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes, signal, onProgress }) {\n    return poll({\n        check: (signal) => info(uuid, {\n            publicKey,\n            baseURL,\n            signal,\n            source,\n            integration,\n            userAgent,\n            retryThrottledRequestMaxTimes,\n            retryNetworkErrorMaxTimes\n        }).then((response) => {\n            if (response.isReady) {\n                return response;\n            }\n            onProgress && onProgress({ isComputable: true, value: 1 });\n            return false;\n        }),\n        signal\n    });\n}\n\nfunction isGroupFileInfo(fileInfo) {\n    return 'defaultEffects' in fileInfo;\n}\nclass UploadcareFile {\n    uuid;\n    name;\n    size;\n    isStored;\n    isImage;\n    mimeType;\n    cdnUrl;\n    s3Url;\n    originalFilename;\n    imageInfo;\n    videoInfo;\n    contentInfo;\n    metadata;\n    s3Bucket;\n    defaultEffects = null;\n    constructor(fileInfo, { baseCDN = defaultSettings.baseCDN, fileName } = {}) {\n        const { uuid, s3Bucket } = fileInfo;\n        const cdnUrl = getUrl(baseCDN, `${uuid}/`);\n        const s3Url = s3Bucket\n            ? getUrl(`https://${s3Bucket}.s3.amazonaws.com/`, `${uuid}/${fileInfo.filename}`)\n            : null;\n        this.uuid = uuid;\n        this.name = fileName || fileInfo.filename;\n        this.size = fileInfo.size;\n        this.isStored = fileInfo.isStored;\n        this.isImage = fileInfo.isImage;\n        this.mimeType = fileInfo.mimeType;\n        this.cdnUrl = cdnUrl;\n        this.originalFilename = fileInfo.originalFilename;\n        this.imageInfo = fileInfo.imageInfo;\n        this.videoInfo = fileInfo.videoInfo;\n        this.contentInfo = fileInfo.contentInfo;\n        this.metadata = fileInfo.metadata || null;\n        this.s3Bucket = s3Bucket || null;\n        this.s3Url = s3Url;\n        if (isGroupFileInfo(fileInfo)) {\n            this.defaultEffects = fileInfo.defaultEffects;\n        }\n    }\n}\n\nconst uploadDirect = (file, { publicKey, fileName, baseURL, secureSignature, secureExpire, store, contentType, signal, onProgress, source, integration, userAgent, retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes, baseCDN, metadata }) => {\n    return base(file, {\n        publicKey,\n        fileName,\n        contentType,\n        baseURL,\n        secureSignature,\n        secureExpire,\n        store,\n        signal,\n        onProgress,\n        source,\n        integration,\n        userAgent,\n        retryThrottledRequestMaxTimes,\n        retryNetworkErrorMaxTimes,\n        metadata\n    })\n        .then(({ file }) => {\n        return isReadyPoll(file, {\n            publicKey,\n            baseURL,\n            source,\n            integration,\n            userAgent,\n            retryThrottledRequestMaxTimes,\n            retryNetworkErrorMaxTimes,\n            onProgress,\n            signal\n        });\n    })\n        .then((fileInfo) => new UploadcareFile(fileInfo, { baseCDN }));\n};\n\nconst uploadFromUploaded = (uuid, { publicKey, fileName, baseURL, signal, onProgress, source, integration, userAgent, retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes, baseCDN }) => {\n    return info(uuid, {\n        publicKey,\n        baseURL,\n        signal,\n        source,\n        integration,\n        userAgent,\n        retryThrottledRequestMaxTimes,\n        retryNetworkErrorMaxTimes\n    })\n        .then((fileInfo) => new UploadcareFile(fileInfo, { baseCDN, fileName }))\n        .then((result) => {\n        // hack for node ¯\\_(ツ)_/¯\n        if (onProgress)\n            onProgress({\n                isComputable: true,\n                value: 1\n            });\n        return result;\n    });\n};\n\nconst race = (fns, { signal } = {}) => {\n    let lastError = null;\n    let winnerIndex = null;\n    const controllers = fns.map(() => new AbortController());\n    const createStopRaceCallback = (i) => () => {\n        winnerIndex = i;\n        controllers.forEach((controller, index) => index !== i && controller.abort());\n    };\n    onCancel(signal, () => {\n        controllers.forEach((controller) => controller.abort());\n    });\n    return Promise.all(fns.map((fn, i) => {\n        const stopRace = createStopRaceCallback(i);\n        return Promise.resolve()\n            .then(() => fn({ stopRace, signal: controllers[i].signal }))\n            .then((result) => {\n            stopRace();\n            return result;\n        })\n            .catch((error) => {\n            lastError = error;\n            return null;\n        });\n    })).then((results) => {\n        if (winnerIndex === null) {\n            throw lastError;\n        }\n        else {\n            return results[winnerIndex];\n        }\n    });\n};\n\nvar WebSocket = window.WebSocket;\n\nclass Events {\n    events = Object.create({});\n    emit(event, data) {\n        this.events[event]?.forEach((fn) => fn(data));\n    }\n    on(event, callback) {\n        this.events[event] = this.events[event] || [];\n        this.events[event].push(callback);\n    }\n    off(event, callback) {\n        if (callback) {\n            this.events[event] = this.events[event].filter((fn) => fn !== callback);\n        }\n        else {\n            this.events[event] = [];\n        }\n    }\n}\n\nconst response = (type, data) => {\n    if (type === 'success') {\n        return { status: Status.Success, ...data };\n    }\n    if (type === 'progress') {\n        return { status: Status.Progress, ...data };\n    }\n    return { status: Status.Error, ...data };\n};\nclass Pusher {\n    key;\n    disconnectTime;\n    ws = undefined;\n    queue = [];\n    isConnected = false;\n    subscribers = 0;\n    emmitter = new Events();\n    disconnectTimeoutId = null;\n    constructor(pusherKey, disconnectTime = 30000) {\n        this.key = pusherKey;\n        this.disconnectTime = disconnectTime;\n    }\n    connect() {\n        this.disconnectTimeoutId && clearTimeout(this.disconnectTimeoutId);\n        if (!this.isConnected && !this.ws) {\n            const pusherUrl = `wss://ws.pusherapp.com/app/${this.key}?protocol=5&client=js&version=1.12.2`;\n            this.ws = new WebSocket(pusherUrl);\n            this.ws.addEventListener('error', (error) => {\n                this.emmitter.emit('error', new Error(error.message));\n            });\n            this.emmitter.on('connected', () => {\n                this.isConnected = true;\n                this.queue.forEach((message) => this.send(message.event, message.data));\n                this.queue = [];\n            });\n            this.ws.addEventListener('message', (e) => {\n                const data = JSON.parse(e.data.toString());\n                switch (data.event) {\n                    case 'pusher:connection_established': {\n                        this.emmitter.emit('connected', undefined);\n                        break;\n                    }\n                    case 'pusher:ping': {\n                        this.send('pusher:pong', {});\n                        break;\n                    }\n                    case 'progress':\n                    case 'success':\n                    case 'fail': {\n                        this.emmitter.emit(data.channel, response(data.event, JSON.parse(data.data)));\n                    }\n                }\n            });\n        }\n    }\n    disconnect() {\n        const actualDisconect = () => {\n            this.ws?.close();\n            this.ws = undefined;\n            this.isConnected = false;\n        };\n        if (this.disconnectTime) {\n            this.disconnectTimeoutId = setTimeout(() => {\n                actualDisconect();\n            }, this.disconnectTime);\n        }\n        else {\n            actualDisconect();\n        }\n    }\n    send(event, data) {\n        const str = JSON.stringify({ event, data });\n        this.ws?.send(str);\n    }\n    subscribe(token, handler) {\n        this.subscribers += 1;\n        this.connect();\n        const channel = `task-status-${token}`;\n        const message = {\n            event: 'pusher:subscribe',\n            data: { channel }\n        };\n        this.emmitter.on(channel, handler);\n        if (this.isConnected) {\n            this.send(message.event, message.data);\n        }\n        else {\n            this.queue.push(message);\n        }\n    }\n    unsubscribe(token) {\n        this.subscribers -= 1;\n        const channel = `task-status-${token}`;\n        const message = {\n            event: 'pusher:unsubscribe',\n            data: { channel }\n        };\n        this.emmitter.off(channel);\n        if (this.isConnected) {\n            this.send(message.event, message.data);\n        }\n        else {\n            this.queue = this.queue.filter((msg) => msg.data.channel !== channel);\n        }\n        if (this.subscribers === 0) {\n            this.disconnect();\n        }\n    }\n    onError(callback) {\n        this.emmitter.on('error', callback);\n        return () => this.emmitter.off('error', callback);\n    }\n}\nlet pusher = null;\nconst getPusher = (key) => {\n    if (!pusher) {\n        // no timeout for nodeJS and 30000 ms for browser\n        const disconectTimeout = typeof window === 'undefined' ? 0 : 30000;\n        pusher = new Pusher(key, disconectTimeout);\n    }\n    return pusher;\n};\nconst preconnect = (key) => {\n    getPusher(key).connect();\n};\n\nfunction pollStrategy({ token, publicKey, baseURL, integration, userAgent, retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes, onProgress, signal }) {\n    return poll({\n        check: (signal) => fromUrlStatus(token, {\n            publicKey,\n            baseURL,\n            integration,\n            userAgent,\n            retryThrottledRequestMaxTimes,\n            retryNetworkErrorMaxTimes,\n            signal\n        }).then((response) => {\n            switch (response.status) {\n                case Status.Error: {\n                    return new UploadError(response.error, response.errorCode);\n                }\n                case Status.Waiting: {\n                    return false;\n                }\n                case Status.Unknown: {\n                    return new UploadError(`Token \"${token}\" was not found.`);\n                }\n                case Status.Progress: {\n                    if (onProgress) {\n                        if (response.total === 'unknown') {\n                            onProgress({ isComputable: false });\n                        }\n                        else {\n                            onProgress({\n                                isComputable: true,\n                                value: response.done / response.total\n                            });\n                        }\n                    }\n                    return false;\n                }\n                case Status.Success: {\n                    if (onProgress)\n                        onProgress({\n                            isComputable: true,\n                            value: response.done / response.total\n                        });\n                    return response;\n                }\n                default: {\n                    throw new Error('Unknown status');\n                }\n            }\n        }),\n        signal\n    });\n}\nconst pushStrategy = ({ token, pusherKey, signal, onProgress }) => new Promise((resolve, reject) => {\n    const pusher = getPusher(pusherKey);\n    const unsubErrorHandler = pusher.onError(reject);\n    const destroy = () => {\n        unsubErrorHandler();\n        pusher.unsubscribe(token);\n    };\n    onCancel(signal, () => {\n        destroy();\n        reject(new CancelError('pusher cancelled'));\n    });\n    pusher.subscribe(token, (result) => {\n        switch (result.status) {\n            case Status.Progress: {\n                if (onProgress) {\n                    if (result.total === 'unknown') {\n                        onProgress({ isComputable: false });\n                    }\n                    else {\n                        onProgress({\n                            isComputable: true,\n                            value: result.done / result.total\n                        });\n                    }\n                }\n                break;\n            }\n            case Status.Success: {\n                destroy();\n                if (onProgress)\n                    onProgress({\n                        isComputable: true,\n                        value: result.done / result.total\n                    });\n                resolve(result);\n                break;\n            }\n            case Status.Error: {\n                destroy();\n                reject(new UploadError(result.msg, result.error_code));\n            }\n        }\n    });\n});\nconst uploadFromUrl = (sourceUrl, { publicKey, fileName, baseURL, baseCDN, checkForUrlDuplicates, saveUrlForRecurrentUploads, secureSignature, secureExpire, store, signal, onProgress, source, integration, userAgent, retryThrottledRequestMaxTimes, pusherKey = defaultSettings.pusherKey, metadata }) => Promise.resolve(preconnect(pusherKey))\n    .then(() => fromUrl(sourceUrl, {\n    publicKey,\n    fileName,\n    baseURL,\n    checkForUrlDuplicates,\n    saveUrlForRecurrentUploads,\n    secureSignature,\n    secureExpire,\n    store,\n    signal,\n    source,\n    integration,\n    userAgent,\n    retryThrottledRequestMaxTimes,\n    metadata\n}))\n    .catch((error) => {\n    const pusher = getPusher(pusherKey);\n    pusher?.disconnect();\n    return Promise.reject(error);\n})\n    .then((urlResponse) => {\n    if (urlResponse.type === TypeEnum.FileInfo) {\n        return urlResponse;\n    }\n    else {\n        return race([\n            ({ signal }) => pollStrategy({\n                token: urlResponse.token,\n                publicKey,\n                baseURL,\n                integration,\n                userAgent,\n                retryThrottledRequestMaxTimes,\n                onProgress,\n                signal\n            }),\n            ({ signal }) => pushStrategy({\n                token: urlResponse.token,\n                pusherKey,\n                signal,\n                onProgress\n            })\n        ], { signal });\n    }\n})\n    .then((result) => {\n    if (result instanceof UploadError)\n        throw result;\n    return result;\n})\n    .then((result) => isReadyPoll(result.uuid, {\n    publicKey,\n    baseURL,\n    integration,\n    userAgent,\n    retryThrottledRequestMaxTimes,\n    onProgress,\n    signal\n}))\n    .then((fileInfo) => new UploadcareFile(fileInfo, { baseCDN }));\n\nconst memo = new WeakMap();\nconst getBlobFromReactNativeAsset = async (asset) => {\n    if (memo.has(asset)) {\n        return memo.get(asset);\n    }\n    const blob = await fetch(asset.uri).then((res) => res.blob());\n    memo.set(asset, blob);\n    return blob;\n};\n\nconst getFileSize = async (file) => {\n    if (isFile(file) || isBlob(file)) {\n        return file.size;\n    }\n    if (isReactNativeAsset(file)) {\n        const blob = await getBlobFromReactNativeAsset(file);\n        return blob.size;\n    }\n    throw new Error(`Unknown file type. Cannot determine file size.`);\n};\n\n/** Check if FileData is multipart data. */\nconst isMultipart = (fileSize, multipartMinFileSize = defaultSettings.multipartMinFileSize) => {\n    return fileSize >= multipartMinFileSize;\n};\n\n/** Uuid type guard. */\nconst isUuid = (data) => {\n    const UUID_REGEX = '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}';\n    const regExp = new RegExp(UUID_REGEX);\n    return !isFileData(data) && regExp.test(data);\n};\n/**\n * Url type guard.\n *\n * @param {SupportedFileInput | Url | Uuid} data\n */\nconst isUrl = (data) => {\n    const URL_REGEX = '^(?:\\\\w+:)?\\\\/\\\\/([^\\\\s\\\\.]+\\\\.\\\\S{2}|localhost[\\\\:?\\\\d]*)\\\\S*$';\n    const regExp = new RegExp(URL_REGEX);\n    return !isFileData(data) && regExp.test(data);\n};\n\nconst runWithConcurrency = (concurrency, tasks) => {\n    return new Promise((resolve, reject) => {\n        const results = [];\n        let rejected = false;\n        let settled = tasks.length;\n        const forRun = [...tasks];\n        const run = () => {\n            const index = tasks.length - forRun.length;\n            const next = forRun.shift();\n            if (next) {\n                next()\n                    .then((result) => {\n                    if (rejected)\n                        return;\n                    results[index] = result;\n                    settled -= 1;\n                    if (settled) {\n                        run();\n                    }\n                    else {\n                        resolve(results);\n                    }\n                })\n                    .catch((error) => {\n                    rejected = true;\n                    reject(error);\n                });\n            }\n        };\n        for (let i = 0; i < concurrency; i++) {\n            run();\n        }\n    });\n};\n\nconst sliceChunk = (file, index, fileSize, chunkSize) => {\n    const start = chunkSize * index;\n    const end = Math.min(start + chunkSize, fileSize);\n    return file.slice(start, end);\n};\n\nconst prepareChunks = async (file, fileSize, chunkSize) => {\n    return (index) => sliceChunk(file, index, fileSize, chunkSize);\n};\n\nconst uploadPart = (chunk, url, { publicKey, contentType, onProgress, signal, integration, retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes }) => multipartUpload(chunk, url, {\n    publicKey,\n    contentType,\n    onProgress,\n    signal,\n    integration,\n    retryThrottledRequestMaxTimes,\n    retryNetworkErrorMaxTimes\n});\nconst uploadMultipart = async (file, { publicKey, fileName, fileSize, baseURL, secureSignature, secureExpire, store, signal, onProgress, source, integration, userAgent, retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes, contentType, multipartChunkSize = defaultSettings.multipartChunkSize, maxConcurrentRequests = defaultSettings.maxConcurrentRequests, baseCDN, metadata }) => {\n    const size = fileSize ?? (await getFileSize(file));\n    let progressValues;\n    const createProgressHandler = (totalChunks, chunkIdx) => {\n        if (!onProgress)\n            return;\n        if (!progressValues) {\n            progressValues = Array(totalChunks).fill(0);\n        }\n        const sum = (values) => values.reduce((sum, next) => sum + next, 0);\n        return (info) => {\n            if (!info.isComputable) {\n                return;\n            }\n            progressValues[chunkIdx] = info.value;\n            onProgress({\n                isComputable: true,\n                value: sum(progressValues) / totalChunks\n            });\n        };\n    };\n    contentType ||= getContentType(file);\n    return multipartStart(size, {\n        publicKey,\n        contentType,\n        fileName: fileName || getFileName(file),\n        baseURL,\n        secureSignature,\n        secureExpire,\n        store,\n        signal,\n        source,\n        integration,\n        userAgent,\n        retryThrottledRequestMaxTimes,\n        retryNetworkErrorMaxTimes,\n        metadata,\n        multipartChunkSize\n    })\n        .then(async ({ uuid, parts }) => {\n        const getChunk = await prepareChunks(file, size, multipartChunkSize);\n        return Promise.all([\n            uuid,\n            runWithConcurrency(maxConcurrentRequests, parts.map((url, index) => () => uploadPart(getChunk(index), url, {\n                publicKey,\n                contentType,\n                onProgress: createProgressHandler(parts.length, index),\n                signal,\n                integration,\n                retryThrottledRequestMaxTimes,\n                retryNetworkErrorMaxTimes\n            })))\n        ]);\n    })\n        .then(([uuid]) => multipartComplete(uuid, {\n        publicKey,\n        baseURL,\n        source,\n        integration,\n        userAgent,\n        retryThrottledRequestMaxTimes,\n        retryNetworkErrorMaxTimes\n    }))\n        .then((fileInfo) => {\n        if (fileInfo.isReady) {\n            return fileInfo;\n        }\n        else {\n            return isReadyPoll(fileInfo.uuid, {\n                publicKey,\n                baseURL,\n                source,\n                integration,\n                userAgent,\n                retryThrottledRequestMaxTimes,\n                retryNetworkErrorMaxTimes,\n                onProgress,\n                signal\n            });\n        }\n    })\n        .then((fileInfo) => new UploadcareFile(fileInfo, { baseCDN }));\n};\n\n/** Uploads file from provided data. */\nasync function uploadFile(data, { publicKey, fileName, baseURL = defaultSettings.baseURL, secureSignature, secureExpire, store, signal, onProgress, source, integration, userAgent, retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes, contentType, multipartMinFileSize, multipartChunkSize, maxConcurrentRequests, baseCDN = defaultSettings.baseCDN, checkForUrlDuplicates, saveUrlForRecurrentUploads, pusherKey, metadata }) {\n    if (isFileData(data)) {\n        const fileSize = await getFileSize(data);\n        if (isMultipart(fileSize, multipartMinFileSize)) {\n            return uploadMultipart(data, {\n                publicKey,\n                contentType,\n                multipartChunkSize,\n                fileSize,\n                fileName,\n                baseURL,\n                secureSignature,\n                secureExpire,\n                store,\n                signal,\n                onProgress,\n                source,\n                integration,\n                userAgent,\n                maxConcurrentRequests,\n                retryThrottledRequestMaxTimes,\n                retryNetworkErrorMaxTimes,\n                baseCDN,\n                metadata\n            });\n        }\n        return uploadDirect(data, {\n            publicKey,\n            fileName,\n            contentType,\n            baseURL,\n            secureSignature,\n            secureExpire,\n            store,\n            signal,\n            onProgress,\n            source,\n            integration,\n            userAgent,\n            retryThrottledRequestMaxTimes,\n            retryNetworkErrorMaxTimes,\n            baseCDN,\n            metadata\n        });\n    }\n    if (isUrl(data)) {\n        return uploadFromUrl(data, {\n            publicKey,\n            fileName,\n            baseURL,\n            baseCDN,\n            checkForUrlDuplicates,\n            saveUrlForRecurrentUploads,\n            secureSignature,\n            secureExpire,\n            store,\n            signal,\n            onProgress,\n            source,\n            integration,\n            userAgent,\n            retryThrottledRequestMaxTimes,\n            retryNetworkErrorMaxTimes,\n            pusherKey,\n            metadata\n        });\n    }\n    if (isUuid(data)) {\n        return uploadFromUploaded(data, {\n            publicKey,\n            fileName,\n            baseURL,\n            signal,\n            onProgress,\n            source,\n            integration,\n            userAgent,\n            retryThrottledRequestMaxTimes,\n            retryNetworkErrorMaxTimes,\n            baseCDN\n        });\n    }\n    throw new TypeError(`File uploading from \"${data}\" is not supported`);\n}\n\nclass UploadcareGroup {\n    uuid;\n    filesCount;\n    totalSize;\n    isStored;\n    isImage;\n    cdnUrl;\n    files;\n    createdAt;\n    storedAt = null;\n    constructor(groupInfo, { baseCDN = defaultSettings.baseCDN } = {}) {\n        this.uuid = groupInfo.id;\n        this.filesCount = groupInfo.filesCount;\n        const groupFiles = groupInfo.files.filter(Boolean);\n        this.totalSize = Object.values(groupFiles).reduce((acc, file) => acc + file.size, 0);\n        this.isStored = !!groupInfo.datetimeStored;\n        this.isImage = !!Object.values(groupFiles).filter((file) => file.isImage)\n            .length;\n        this.cdnUrl = groupInfo.cdnUrl;\n        this.files = groupFiles.map((fileInfo) => new UploadcareFile(fileInfo, { baseCDN }));\n        this.createdAt = groupInfo.datetimeCreated;\n        this.storedAt = groupInfo.datetimeStored;\n    }\n}\n\n/** FileData type guard. */\nconst isFileDataArray = (data) => {\n    for (const item of data) {\n        if (!isFileData(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/** Uuid type guard. */\nconst isUuidArray = (data) => {\n    for (const item of data) {\n        if (!isUuid(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/** Url type guard. */\nconst isUrlArray = (data) => {\n    for (const item of data) {\n        if (!isUrl(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n\nfunction uploadFileGroup(data, { publicKey, fileName, baseURL = defaultSettings.baseURL, secureSignature, secureExpire, store, signal, onProgress, source, integration, userAgent, retryThrottledRequestMaxTimes, retryNetworkErrorMaxTimes, contentType, multipartChunkSize = defaultSettings.multipartChunkSize, baseCDN = defaultSettings.baseCDN, checkForUrlDuplicates, saveUrlForRecurrentUploads, jsonpCallback }) {\n    if (!isFileDataArray(data) && !isUrlArray(data) && !isUuidArray(data)) {\n        throw new TypeError(`Group uploading from \"${data}\" is not supported`);\n    }\n    let progressValues;\n    let isStillComputable = true;\n    const filesCount = data.length;\n    const createProgressHandler = (size, index) => {\n        if (!onProgress)\n            return;\n        if (!progressValues) {\n            progressValues = Array(size).fill(0);\n        }\n        const normalize = (values) => values.reduce((sum, next) => sum + next) / size;\n        return (info) => {\n            if (!info.isComputable || !isStillComputable) {\n                isStillComputable = false;\n                onProgress({ isComputable: false });\n                return;\n            }\n            progressValues[index] = info.value;\n            onProgress({ isComputable: true, value: normalize(progressValues) });\n        };\n    };\n    return Promise.all(data.map((file, index) => {\n        if (isFileData(file) || isUrl(file)) {\n            return uploadFile(file, {\n                publicKey,\n                fileName,\n                baseURL,\n                secureSignature,\n                secureExpire,\n                store,\n                signal,\n                onProgress: createProgressHandler(filesCount, index),\n                source,\n                integration,\n                userAgent,\n                retryThrottledRequestMaxTimes,\n                retryNetworkErrorMaxTimes,\n                contentType,\n                multipartChunkSize,\n                baseCDN,\n                checkForUrlDuplicates,\n                saveUrlForRecurrentUploads\n            }).then((fileInfo) => fileInfo.uuid);\n        }\n        else {\n            // Do not request file info by uuid before creating group because this isn't necessary\n            return file;\n        }\n    })).then((uuids) => {\n        return group(uuids, {\n            publicKey,\n            baseURL,\n            jsonpCallback,\n            secureSignature,\n            secureExpire,\n            signal,\n            source,\n            integration,\n            userAgent,\n            retryThrottledRequestMaxTimes,\n            retryNetworkErrorMaxTimes\n        })\n            .then((groupInfo) => new UploadcareGroup(groupInfo, { baseCDN }))\n            .then((group) => {\n            onProgress && onProgress({ isComputable: true, value: 1 });\n            return group;\n        });\n    });\n}\n\n/** Populate options with settings. */\nconst populateOptionsWithSettings = (options, settings) => ({\n    ...settings,\n    ...options\n});\nclass UploadClient {\n    settings;\n    constructor(settings) {\n        this.settings = Object.assign({}, defaultSettings, settings);\n    }\n    updateSettings(newSettings) {\n        this.settings = Object.assign(this.settings, newSettings);\n    }\n    getSettings() {\n        return this.settings;\n    }\n    base(file, options = {}) {\n        const settings = this.getSettings();\n        return base(file, populateOptionsWithSettings(options, settings));\n    }\n    info(uuid, options = {}) {\n        const settings = this.getSettings();\n        return info(uuid, populateOptionsWithSettings(options, settings));\n    }\n    fromUrl(sourceUrl, options = {}) {\n        const settings = this.getSettings();\n        return fromUrl(sourceUrl, populateOptionsWithSettings(options, settings));\n    }\n    fromUrlStatus(token, options = {}) {\n        const settings = this.getSettings();\n        return fromUrlStatus(token, populateOptionsWithSettings(options, settings));\n    }\n    group(uuids, options = {}) {\n        const settings = this.getSettings();\n        return group(uuids, populateOptionsWithSettings(options, settings));\n    }\n    groupInfo(id, options = {}) {\n        const settings = this.getSettings();\n        return groupInfo(id, populateOptionsWithSettings(options, settings));\n    }\n    multipartStart(size, options = {}) {\n        const settings = this.getSettings();\n        return multipartStart(size, populateOptionsWithSettings(options, settings));\n    }\n    multipartUpload(part, url, options = {}) {\n        const settings = this.getSettings();\n        return multipartUpload(part, url, populateOptionsWithSettings(options, settings));\n    }\n    multipartComplete(uuid, options = {}) {\n        const settings = this.getSettings();\n        return multipartComplete(uuid, populateOptionsWithSettings(options, settings));\n    }\n    uploadFile(data, options = {}) {\n        const settings = this.getSettings();\n        return uploadFile(data, populateOptionsWithSettings(options, settings));\n    }\n    uploadFileGroup(data, options = {}) {\n        const settings = this.getSettings();\n        return uploadFileGroup(data, populateOptionsWithSettings(options, settings));\n    }\n    isReadyPoll(uuid, options = {}) {\n        const settings = this.getSettings();\n        return isReadyPoll(uuid, populateOptionsWithSettings(options, settings));\n    }\n}\n\nclass Queue {\n    _concurrency = 1;\n    _pending = [];\n    _running = 0;\n    _resolvers = new Map();\n    _rejectors = new Map();\n    constructor(concurrency) {\n        this._concurrency = concurrency;\n    }\n    _run() {\n        const tasksLeft = this._concurrency - this._running;\n        for (let i = 0; i < tasksLeft; i++) {\n            const task = this._pending.shift();\n            if (!task) {\n                return;\n            }\n            const resolver = this._resolvers.get(task);\n            const rejector = this._rejectors.get(task);\n            if (!resolver || !rejector)\n                throw new Error('Unexpected behavior: resolver or rejector is undefined');\n            this._running += 1;\n            task()\n                .finally(() => {\n                this._resolvers.delete(task);\n                this._rejectors.delete(task);\n                this._running -= 1;\n                this._run();\n            })\n                .then((value) => resolver(value))\n                .catch((error) => rejector(error));\n        }\n    }\n    add(task) {\n        return new Promise((resolve, reject) => {\n            this._resolvers.set(task, resolve);\n            this._rejectors.set(task, reject);\n            this._pending.push(task);\n            this._run();\n        });\n    }\n    get pending() {\n        return this._pending.length;\n    }\n    get running() {\n        return this._running;\n    }\n    set concurrency(value) {\n        this._concurrency = value;\n        this._run();\n    }\n    get concurrency() {\n        return this._concurrency;\n    }\n}\n\n/* Low-Level API */\n/** @deprecated Please use NetworkError instead. */\nconst UploadcareNetworkError = NetworkError;\n/** @deprecated Please use UploadError instead. */\nconst UploadClientError = UploadError;\n\nexport { CancelError, NetworkError, Queue, UploadClient, UploadClientError, UploadError, UploadcareError, UploadcareFile, UploadcareGroup, UploadcareNetworkError, base, fromUrl, fromUrlStatus, getUserAgent$1 as getUserAgent, group, groupInfo, info, isReadyPoll, multipartComplete, multipartStart, multipartUpload, uploadDirect, uploadFile, uploadFileGroup, uploadFromUploaded, uploadFromUrl, uploadMultipart };\n"],
  "mappings": "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",
  "names": ["fn", "request", "response", "base", "TypeEnum", "Status", "signal", "file", "pusher", "sum", "info", "groupInfo", "group"]
}
